// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using YumeNailBar.Infrastructure.Persistence.EF.Contexts.ApplicationContext;

#nullable disable

namespace YumeNailBar.Infrastructure.Persistence.EF.Migrations
{
    [DbContext(typeof(CustomerDbContext))]
    partial class CustomerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("YumeNailBar.Domain.AggregateModels.CustomerAggregate.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("_comment")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("Comment");

                    b.Property<string>("_customerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name");

                    b.Property<string>("_email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Email");

                    b.Property<string>("_phoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("character varying(12)")
                        .HasColumnName("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("YumeNailBar.Domain.AggregateModels.CustomerAggregate.Entities.Procedure", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<string>("ProcedureKind")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RegistrationId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RegistrationId");

                    b.ToTable("Procedures", (string)null);
                });

            modelBuilder.Entity("YumeNailBar.Domain.AggregateModels.CustomerAggregate.Entities.Registration", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustomerRegistrationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("_appointmentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("AppointmentDate");

                    b.Property<bool>("_isCanceled")
                        .HasColumnType("boolean")
                        .HasColumnName("Status");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRegistrationId");

                    b.ToTable("Registrations", (string)null);
                });

            modelBuilder.Entity("YumeNailBar.Domain.AggregateModels.CustomerAggregate.Entities.Procedure", b =>
                {
                    b.HasOne("YumeNailBar.Domain.AggregateModels.CustomerAggregate.Entities.Registration", null)
                        .WithMany("Procedures")
                        .HasForeignKey("RegistrationId");
                });

            modelBuilder.Entity("YumeNailBar.Domain.AggregateModels.CustomerAggregate.Entities.Registration", b =>
                {
                    b.HasOne("YumeNailBar.Domain.AggregateModels.CustomerAggregate.Customer", null)
                        .WithMany("Registrations")
                        .HasForeignKey("CustomerRegistrationId");
                });

            modelBuilder.Entity("YumeNailBar.Domain.AggregateModels.CustomerAggregate.Customer", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("YumeNailBar.Domain.AggregateModels.CustomerAggregate.Entities.Registration", b =>
                {
                    b.Navigation("Procedures");
                });
#pragma warning restore 612, 618
        }
    }
}
